* PTRHash

This is a work-in-progress reimplementation of [[https://github.com/jermp/pthash][PTHash]] in Rust.

PTHash is a /minimal perfect hashing function/ that maps a list of $n$ distinct
keys into $[n]$.

Goals are, in this order:
1. Implementing the basics to understand the algorithm better.
2. Playing around with some ideas I have for faster queries.
3. [Low priority for the moment.] Providing a stable Rust implementation.

I'm keeping a blogpost with remarks and ideas at [[https://curiouscoding.nl/notes/pthash]].

** Todo list
Roughly in order of my excitement to implement things:
- [X] Basic construction and query functions.
- [X] Free-list
- [ ] Packed-integer encoding
- [ ] Dictionary encoding
- [ ] Batch-query processing with prefetching
- [ ] Try out faster moduli
- [ ] Front-back split
- [ ] Non-~u64~ keys
- [ ] Elias-Fano encoding [low priority]
  - [ ] EF encoding of main table
  - [ ] EF of free list

** Usage

#+begin_src rust
let keys = generate_keys(n);

let mphf = FastPtrHash::new(&keys, PtrHashParams::default());

// Test that all items map to different indices
let mut done = vec![false; n];

for key in keys {
    let idx = mphf.index(&key);
    assert!(!done[idx]);
    done[idx] = true;
}
#+end_src
